{"version":3,"sources":["quiz-data.js","start-btn.js","Result.js","quest-disp.js","quiz-display.js","App.js","serviceWorker.js","index.js"],"names":["questionData","question","options","incorrectText","hintText","StartButton","started","onClick","this","props","onStart","setStartButton","React","Component","Result","clicked","answer","wrongText","resetReq","giveResult","OptionList","choices","map","option","index","className","key","handleClick","generateList","Question","bind","state","optionClick","e","persist","result","target","console","log","setState","resetCount","QuizDisplay","quizTitle","quizData","App","startButtonClicked","resetButtonClicked","questionList","startQuiz","resetCounter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cab54d4.chunk.js","sourcesContent":["const questionData = [];\r\n\r\nquestionData[1] = {\r\n    question: \"What was the best album from the 1980s?\",\r\n    options: [\r\n        [\"Purple Rain\", true],\r\n        [\"Thriller\", false],\r\n        [\"Like a Virgin\", false]\r\n    ],\r\n    incorrectText: \"Incorrect.  Purple Rain was the best album of the 1980s.\",\r\n    hintText: \"It was a movie soundtrack.\"\r\n    //resultBoxId: \"result1\"\r\n}\r\n\r\nquestionData[2] = {\r\n    question: \"Which rap group had a song including the lyrics: 'The name's McDaniels, not McDonalds. / The rhymes are Darryl's and the burgers are Ronald's'\",\r\n    options: [\r\n        [\"2 Live Crew\", false],\r\n        [\"Public Enemy\", false],\r\n        [\"Run-DMC\", true],\r\n    ],\r\n    incorrectText: \"Incorrect.  Darryl McDaniels is the DMC of Run-DMC.\",\r\n    hintText: \"It's Tricky! (To rock a rhyme)\",\r\n    //resultBoxId: \"result2\"\r\n}\r\n\r\nquestionData[3] = {\r\n    question: \"What does TARDIS stand for?\",\r\n    options: [\r\n        [\"Totally Awesome Retro DJ in Seattle\", false],\r\n        [\"Time and Relative Dimension in Space\", true],\r\n        [\"Torque and Rotational Deceleration in Spin\", false],\r\n    ],\r\n    incorrectText: \"Incorrect.  TARDIS is Time and Relative Dimension in Space\",\r\n    hintText: \"The Daleks are coming!  Call the Doctor!\"\r\n    //resultBoxId: \"result3\"\r\n}\r\n\r\nexport default questionData;","import React from 'react';\r\n\r\nclass StartButton extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         startButtonClicked: false,\r\n    //         resetButtonClicked: false,\r\n    //         resetCount: 0,\r\n    //       }\r\n    // }\r\n    setStartButton(started) {\r\n        if (started) {\r\n            return 'Reset Quiz'\r\n        } else {\r\n            return 'Start Quiz'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.onStart}>{this.setStartButton(this.props.started)}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StartButton;","import React from 'react'\r\n\r\n\r\nclass Result extends React.Component {\r\n\r\n    giveResult(clicked, answer, wrongText, resetReq) {\r\n        if (!clicked || resetReq) {\r\n            return <p>Click on an answer to select it.</p>\r\n        } else if (answer === 'correct') {\r\n            return <button>Correct!</button>\r\n        } else {\r\n            return <button>{wrongText}</button>\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>{this.giveResult(this.props.clicked, this.props.answer, this.props.wrongText, this.props.resetReq)}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport Result from './Result';\r\n\r\nclass OptionList extends React.Component {\r\n    generateList(choices) {\r\n            const listItems = choices.map((option, index) => {\r\n            if (option[1]) {\r\n                return <li className=\"correct\" key = {index} onClick={this.props.handleClick}>{option[0]}</li>\r\n            } else {\r\n                return <li key = {index} onClick={this.props.handleClick}>{option[0]}</li>\r\n            }\r\n        });\r\n        return listItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ol>{this.generateList(this.props.options)}</ol>\r\n        )\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.state = {\r\n            optionClick: false,\r\n            answer: ''\r\n        }\r\n    }\r\n\r\n    async handleClick(e) {\r\n\r\n        // if (this.props.resetReq) {\r\n        //     this.setState({\r\n        //         optionClick: false,\r\n        //         answer: '' \r\n        //     })\r\n        // } else {\r\n            e.persist();\r\n            const result = e.target.className;\r\n            console.log('Something was clicked');\r\n            await this.setState({\r\n                optionClick: true,\r\n                answer: result\r\n            });\r\n        \r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.props.question.question}</h2>\r\n                <OptionList options={this.props.question.options} handleClick = {this.handleClick}></OptionList>\r\n                <Result wrongText = {this.props.question.incorrectText} clicked = {this.state.optionClick} answer = {this.state.answer} resetReq = {this.props.resetReq} resetCount = {this.props.resetCount}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport Question from './quest-disp.js';\r\n\r\nclass QuizDisplay extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.props.quizTitle}</p>\r\n                {\r\n                    this.props.quizData.map((question,index) => {\r\n                        // {console.log(question)}\r\n                        return <Question question={question} key={index} resetReq = {this.props.resetReq} resetCount = {this.props.resetCount}></Question>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizDisplay;\r\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport questionData from './quiz-data.js';\nimport StartButton from './start-btn';\nimport QuizDisplay from './quiz-display.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startButtonClicked: false,\n      resetButtonClicked: false,\n      resetCount: 0,\n      quizTitle: 'Here\\'s my awesome quiz app!',\n      questionList: []\n    }\n    this.startQuiz = this.startQuiz.bind(this);\n\n  }\n\n  async startQuiz() {\n    let resetCounter = this.state.resetCount;\n    if (this.state.startButtonClicked) {\n      await this.setState({\n        resetButtonClicked: true,\n        resetCount: resetCounter + 1\n        });\n    }\n    await this.setState({\n      questionList: questionData,\n      startButtonClicked: true\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n          <StartButton onStart = {this.startQuiz} started={this.state.startButtonClicked}></StartButton>\n          <QuizDisplay quizData = {this.state.questionList} quizTitle = {this.state.quizTitle} resetReq = {this.state.resetButtonClicked} resetCount = {this.state.resetCount}></QuizDisplay>\n      </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}