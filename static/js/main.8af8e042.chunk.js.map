{"version":3,"sources":["quiz-data.js","start-btn.js","reset-btn.js","Result.js","quest-disp.js","quiz-display.js","App.js","serviceWorker.js","index.js"],"names":["questionData","question","options","incorrectText","hintText","StartButton","started","onClick","this","props","onStart","setStartButton","React","Component","ResetButton","onReset","console","log","displayReset","Result","clicked","answer","wrongText","giveResult","OptionList","choices","map","option","index","className","key","handleClick","generateList","Question","bind","state","optionClick","e","persist","result","target","setState","prevProps","prevState","resetCount","QuizDisplay","quizTitle","quizData","App","startButtonClicked","resetButtonClicked","questionList","startQuiz","resetQuiz","numResets","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8af8e042.chunk.js","sourcesContent":["const questionData = [];\r\n\r\nquestionData[1] = {\r\n    question: \"What was the best album from the 1980s?\",\r\n    options: [\r\n        [\"Purple Rain\", true],\r\n        [\"Thriller\", false],\r\n        [\"Like a Virgin\", false]\r\n    ],\r\n    incorrectText: \"Incorrect.  Purple Rain was the best album of the 1980s.\",\r\n    hintText: \"It was a movie soundtrack.\"\r\n    //resultBoxId: \"result1\"\r\n}\r\n\r\nquestionData[2] = {\r\n    question: \"Which rap group had a song including the lyrics: 'The name's McDaniels, not McDonalds. / The rhymes are Darryl's and the burgers are Ronald's'\",\r\n    options: [\r\n        [\"2 Live Crew\", false],\r\n        [\"Public Enemy\", false],\r\n        [\"Run-DMC\", true],\r\n    ],\r\n    incorrectText: \"Incorrect.  Darryl McDaniels is the DMC of Run-DMC.\",\r\n    hintText: \"It's Tricky! (To rock a rhyme)\",\r\n    //resultBoxId: \"result2\"\r\n}\r\n\r\nquestionData[3] = {\r\n    question: \"What does TARDIS stand for?\",\r\n    options: [\r\n        [\"Totally Awesome Retro DJ in Seattle\", false],\r\n        [\"Time and Relative Dimension in Space\", true],\r\n        [\"Torque and Rotational Deceleration in Spin\", false],\r\n    ],\r\n    incorrectText: \"Incorrect.  TARDIS is Time and Relative Dimension in Space\",\r\n    hintText: \"The Daleks are coming!  Call the Doctor!\"\r\n    //resultBoxId: \"result3\"\r\n}\r\n\r\nexport default questionData;","import React from 'react';\r\n\r\nclass StartButton extends React.Component {\r\n\r\n    setStartButton(started) {\r\n        if (started) {\r\n            return null\r\n        } else {\r\n            return <button onClick={this.props.onStart}>Start Quiz</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.setStartButton(this.props.started)}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default StartButton;\r\n","import React from 'react';\r\n\r\nclass ResetButton extends React.Component {\r\n    displayReset() {\r\n        if (this.props.started) {\r\n            return <button onClick={this.props.onReset}>Reset</button>\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {console.log(this.props.started)}\r\n                {this.displayReset()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetButton;","import React from 'react'\r\n\r\n\r\nclass Result extends React.Component {\r\n    giveResult() {\r\n        if (!this.props.clicked) {\r\n          return <p>Click on an answer to select it.</p>\r\n        } else if (this.props.answer === 'correct') {\r\n           return <button>Correct!</button>\r\n        } else {\r\n          return <button>{this.props.wrongText}</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n         <div>{this.giveResult()}</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport Result from './Result';\r\n\r\nclass OptionList extends React.Component {\r\n    generateList(choices) {\r\n            const listItems = choices.map((option, index) => {\r\n            if (option[1]) {\r\n                return <li className=\"correct\" key = {index} onClick={this.props.handleClick}>{option[0]}</li>\r\n            } else {\r\n                return <li key = {index} onClick={this.props.handleClick}>{option[0]}</li>\r\n            }\r\n        });\r\n        return listItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ol>{this.generateList(this.props.options)}</ol>\r\n        )\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.state = {\r\n            optionClick: false,\r\n            answer: '',\r\n        }\r\n        \r\n    }\r\n\r\n    handleClick(e) {\r\n        e.persist();\r\n        const result = e.target.className;\r\n        console.log('Something was clicked');\r\n        this.setState({\r\n            optionClick: true,\r\n            answer: result\r\n        });\r\n    }    \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.resetCount !== prevProps.resetCount) {\r\n            this.setState({optionClick: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.props.question.question}</h2>\r\n                <OptionList options={this.props.question.options} handleClick = {this.handleClick}></OptionList>\r\n                <Result wrongText = {this.props.question.incorrectText} clicked = {this.state.optionClick} answer = {this.state.answer}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport Question from './quest-disp.js';\r\n\r\nclass QuizDisplay extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.props.quizTitle}</p>\r\n                {\r\n                    this.props.quizData.map((question,index) => {\r\n                        return <Question question={question} key={index} resetCount = {this.props.resetCount}></Question>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizDisplay;\r\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport questionData from './quiz-data.js';\nimport StartButton from './start-btn';\nimport ResetButton from './reset-btn';\nimport QuizDisplay from './quiz-display.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startButtonClicked: false,\n      resetButtonClicked: false,\n      resetCount: 0,\n      quizTitle: 'Here\\'s my awesome quiz app!',\n      questionList: []\n    }\n    this.startQuiz = this.startQuiz.bind(this);\n    this.resetQuiz = this.resetQuiz.bind(this);\n  }\n\n  resetQuiz() {\n    let numResets = this.state.resetCount;\n    console.log('Reset button clicked');\n    this.setState({\n      resetCount: numResets + 1\n    });\n  }\n\n  startQuiz() {\n    this.setState({\n        questionList: questionData,\n        startButtonClicked: true\n      })\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n          <StartButton onStart = {this.startQuiz} started={this.state.startButtonClicked}></StartButton>\n          <ResetButton onReset = {this.resetQuiz} started = {this.state.startButtonClicked}></ResetButton>\n          <QuizDisplay quizData = {this.state.questionList} quizTitle = {this.state.quizTitle} resetCount = {this.state.resetCount}></QuizDisplay>\n      </div>\n  )};\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}