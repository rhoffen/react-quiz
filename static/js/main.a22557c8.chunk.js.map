{"version":3,"sources":["quiz-data.js","start-btn.js","reset-btn.js","Result.js","hint-button.js","quest-disp.js","quiz-display.js","App.js","serviceWorker.js","index.js"],"names":["questionData","question","options","incorrectText","hintText","StartButton","started","onClick","this","props","onStart","quizTitle","setStartButton","React","Component","ResetButton","onReset","displayReset","Result","clicked","answer","wrongText","giveResult","HintButton","hintRequest","hintClick","giveHint","OptionList","choices","map","option","index","className","class2","key","handleClick","generateList","Question","bind","state","hintRequested","e","setState","prevProps","prevState","resetCount","id","optionClick","QuizDisplay","score","quizData","stateKey","persist","classList","target","split","result","scoreAdd","newScore","console","log","item","Object","keys","slice","forEach","App","startButtonClicked","resetButtonClicked","questionList","startQuiz","resetQuiz","numResets","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a22557c8.chunk.js","sourcesContent":["const questionData = [];\r\n\r\nquestionData[0] = {\r\n    question: \"What was the best album from the 1980s?\",\r\n    options: [\r\n        [\"Purple Rain\", true],\r\n        [\"Thriller\", false],\r\n        [\"Like a Virgin\", false]\r\n    ],\r\n    incorrectText: \"Incorrect.  Purple Rain was the best album of the 1980s.\",\r\n    hintText: \"It was a movie soundtrack.\"\r\n    //resultBoxId: \"result1\"\r\n}\r\n\r\nquestionData[1] = {\r\n    question: \"Which rap group had a song including the lyrics: 'The name's McDaniels, not McDonalds. / The rhymes are Darryl's and the burgers are Ronald's'\",\r\n    options: [\r\n        [\"2 Live Crew\", false],\r\n        [\"Public Enemy\", false],\r\n        [\"Run-DMC\", true],\r\n    ],\r\n    incorrectText: \"Incorrect.  Darryl McDaniels is the DMC of Run-DMC.\",\r\n    hintText: \"It's Tricky! (To rock a rhyme)\",\r\n    //resultBoxId: \"result2\"\r\n}\r\n\r\nquestionData[2] = {\r\n    question: \"What does TARDIS stand for?\",\r\n    options: [\r\n        [\"Totally Awesome Retro DJ in Seattle\", false],\r\n        [\"Time and Relative Dimension in Space\", true],\r\n        [\"Torque and Rotational Deceleration in Spin\", false],\r\n    ],\r\n    incorrectText: \"Incorrect.  TARDIS is Time and Relative Dimension in Space\",\r\n    hintText: \"The Daleks are coming!  Call the Doctor!\"\r\n    //resultBoxId: \"result3\"\r\n}\r\n\r\nexport default questionData;","import React from 'react';\r\n\r\nclass StartButton extends React.Component {\r\n\r\n    setStartButton(started) {\r\n        if (started) {\r\n            return null\r\n        } else {\r\n            return <button onClick={this.props.onStart}>Start Quiz</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.quizTitle}</h1>\r\n                {this.setStartButton(this.props.started)}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default StartButton;\r\n","import React from 'react';\r\n\r\nclass ResetButton extends React.Component {\r\n    displayReset() {\r\n        if (this.props.started) {\r\n            return <button onClick={this.props.onReset}>Reset</button>\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayReset()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetButton;","import React from 'react'\r\n\r\n\r\nclass Result extends React.Component {\r\n    giveResult() {\r\n        if (!this.props.clicked) {\r\n          return <p>Click on an answer to select it.</p>\r\n        } else if (this.props.answer === 'correct') {\r\n           return <button>Correct!</button>\r\n        } else {\r\n          return <button>{this.props.wrongText}</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n         <div>{this.giveResult()}</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\n\r\n\r\nclass HintButton extends React.Component {\r\n    giveHint() {\r\n        if (this.props.hintRequest) {\r\n            return this.props.hintText\r\n        } else {\r\n            return 'Get a Hint'\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return <button onClick = {this.props.hintClick}>{this.giveHint()}</button>\r\n    }\r\n}\r\n\r\nexport default HintButton;","import React from 'react';\r\nimport Result from './Result';\r\nimport HintButton from './hint-button';\r\n\r\nclass OptionList extends React.Component {\r\n    generateList(choices) {\r\n            const listItems = choices.map((option, index) => {\r\n            if (option[1]) {\r\n                return <li className={`correct ${this.props.class2}`} key = {index} onClick={this.props.handleClick}>{option[0]}</li>\r\n            } else {\r\n                return <li className={`incorrect ${this.props.class2}`} key = {index} onClick={this.props.handleClick}>{option[0]}</li>\r\n            }\r\n        });\r\n        return listItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ol>{this.generateList(this.props.options)}</ol>\r\n        )\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.hintClick = this.hintClick.bind(this);\r\n        this.state = {\r\n            hintRequested: false\r\n        }\r\n    }\r\n\r\n    hintClick(e) {\r\n        this.setState({\r\n            hintRequested: true\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.resetCount !== prevProps.resetCount) {\r\n            this.setState({\r\n                hintRequested: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.props.question.question}</h2>\r\n                <OptionList options={this.props.question.options} class2 = {this.props.id} handleClick = {this.props.optionClick ? null : this.props.handleClick}></OptionList>\r\n                <HintButton hintText = {this.props.question.hintText} hintClick = {this.hintClick} hintRequest = {this.state.hintRequested}/>\r\n                <Result wrongText = {this.props.question.incorrectText} clicked = {this.props.optionClick} answer = {this.props.answer}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport Question from './quest-disp.js';\r\n\r\nclass QuizDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            score: 0\r\n        }\r\n        this.props.quizData.map((question, index) => {\r\n           let stateKey = `q${index}`;\r\n           this.state[stateKey] = {};\r\n           this.state[stateKey].optionClick = false;\r\n           this.state[stateKey].answer = '';\r\n        });\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.persist();\r\n        const classList = e.target.className.split(' ');\r\n        const result = classList[0];\r\n        let scoreAdd = result === \"correct\" ? 1 : 0;\r\n        let newScore = this.state.score + scoreAdd;\r\n        console.log(`add to score: ${scoreAdd}`);\r\n        let item = classList[1];\r\n        console.log('Something was clicked');\r\n        this.setState({\r\n            score: newScore,\r\n            [item]:{optionClick: true,\r\n                  answer: result}\r\n\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.resetCount !== prevProps.resetCount) {\r\n            let keyList = Object.keys(this.state).slice(1);\r\n            keyList.forEach(key => {\r\n                this.setState({\r\n                    score: 0,\r\n                    [key]: {\r\n                        optionClick: false,\r\n                        answer: ''}\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.props.quizTitle}</p>\r\n                {\r\n                    this.props.started ? <span>Score: {this.state.score}</span> : null\r\n                }\r\n                {\r\n                    this.props.quizData.map((question,index) => {\r\n                        let item = `q${index}`;\r\n                        return <Question handleClick = {this.handleClick} optionClick = {this.state[item].optionClick} answer = {this.state[item].answer} question={question} id = {`q${index}`} key={index} resetCount = {this.props.resetCount}></Question>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizDisplay;\r\n","import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport questionData from './quiz-data.js';\r\nimport StartButton from './start-btn';\r\nimport ResetButton from './reset-btn';\r\nimport QuizDisplay from './quiz-display.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startButtonClicked: false,\r\n      resetButtonClicked: false,\r\n      resetCount: 0,\r\n      quizTitle: 'Here\\'s my awesome quiz app!',\r\n      questionList: questionData\r\n    }\r\n    this.startQuiz = this.startQuiz.bind(this);\r\n    this.resetQuiz = this.resetQuiz.bind(this);\r\n  }\r\n\r\n  resetQuiz() {\r\n    let numResets = this.state.resetCount;\r\n    console.log('Reset button clicked');\r\n    this.setState({\r\n      resetCount: numResets + 1\r\n    });\r\n  }\r\n\r\n  startQuiz() {\r\n    this.setState({\r\n        startButtonClicked: true\r\n      })\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <StartButton onStart = {this.startQuiz} started={this.state.startButtonClicked} quizTitle = {this.state.quizTitle}></StartButton>\r\n          <ResetButton onReset = {this.resetQuiz} started = {this.state.startButtonClicked}></ResetButton>\r\n          {\r\n            this.state.startButtonClicked ? <QuizDisplay started = {this.state.startButtonClicked} quizData = {this.state.questionList} resetCount = {this.state.resetCount}></QuizDisplay> : null\r\n          }\r\n          \r\n      </div>\r\n  )};\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}